{"ast":null,"code":"var _jsxFileName = \"/Users/indianic/Desktop/react/section14/httprequests/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useEffect, useCallback } from \"react\";\nimport UsersList from \"./components/UsersList\";\nimport Loader from \"react-js-loader\";\nimport AddUser from \"./components/AddUser\";\nimport { Button } from \"reactstrap\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [users, setUsers] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchUsers = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\"http://localhost:4000/users\");\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      setUsers(data);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchUsers();\n  }, [fetchUsers]);\n\n  async function addUserHandler(user) {\n    await fetch(\"http://localhost:4000/users\", {\n      method: \"POST\",\n      body: JSON.stringify(user),\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    });\n  }\n\n  async function onDeleteID(deletedData) {\n    await fetch(`http://localhost:4000/users/${deletedData}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    });\n  }\n\n  useEffect(() => {\n    let content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No Users Found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 19\n    }, this);\n\n    if (users.length > 0) {\n      content = /*#__PURE__*/_jsxDEV(UsersList, {\n        users: users,\n        deleteId: onDeleteID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this);\n    }\n  }, []);\n\n  if (error) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }, this);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Loader, {\n        type: \"spinner-circle\",\n        bgColor: \"#000000\",\n        title: \"box-rotate-x\",\n        size: 100\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(AddUser, {\n        addUser: addUserHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        color: \"success\",\n        onClick: fetchUsers,\n        children: \"Fetch UserList\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"JPWqHJR8P63zse9/KH9LMoPrbKA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/indianic/Desktop/react/section14/httprequests/src/App.js"],"names":["React","Fragment","useState","useEffect","useCallback","UsersList","Loader","AddUser","Button","App","users","setUsers","isLoading","setIsLoading","error","setError","fetchUsers","response","fetch","ok","Error","data","json","message","addUserHandler","user","method","body","JSON","stringify","headers","onDeleteID","deletedData","content","length"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect, useCallback } from \"react\";\nimport UsersList from \"./components/UsersList\";\nimport Loader from \"react-js-loader\";\nimport AddUser from \"./components/AddUser\";\nimport { Button } from \"reactstrap\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [users, setUsers] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchUsers = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"http://localhost:4000/users\");\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n      const data = await response.json();\n      setUsers(data);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    fetchUsers();\n  }, [fetchUsers]);\n\n  async function addUserHandler(user) {\n    await fetch(\"http://localhost:4000/users\", {\n      method: \"POST\",\n      body: JSON.stringify(user),\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n    });\n  }\n  async function onDeleteID(deletedData) {\n    await fetch(`http://localhost:4000/users/${deletedData}`, {\n      method: \"DELETE\",\n\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n    });\n  }\n  useEffect(() => {\n    let content = <p>No Users Found</p>;\n    if (users.length > 0) {\n      content = <UsersList users={users} deleteId={onDeleteID} />;\n    }\n  }, []);\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = (\n      <div>\n        <Loader\n          type=\"spinner-circle\"\n          bgColor={\"#000000\"}\n          title={\"box-rotate-x\"}\n          size={100}\n        />\n      </div>\n    );\n  }\n  return (\n    <Fragment>\n      <section>\n        <AddUser addUser={addUserHandler} />\n      </section>\n      <section>\n        <Button color=\"success\" onClick={fetchUsers}>\n          Fetch UserList\n        </Button>\n      </section>\n      <section>{content}</section>\n    </Fragment>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}