{"ast":null,"code":"var _jsxFileName = \"/Users/indianic/Desktop/react/section14/httprequests/src/App.js\";\n// import React, { Fragment, useState, useEffect, useCallback } from \"react\";\nimport UsersList from \"./components/UsersList\"; // import Loader from \"react-js-loader\";\n\nimport AddUser from \"./components/AddUser\";\nimport UpdateUser from \"./components/UpdateUser\"; // import { Button } from \"reactstrap\";\n\nimport \"./App.css\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  //   const [users, setUsers] = useState([]);\n  //   const [isLoading, setIsLoading] = useState(false);\n  //   const [error, setError] = useState(null);\n  //   const fetchUsers = useCallback(async () => {\n  //     setIsLoading(true);\n  //     setError(null);\n  //     try {\n  //       const response = await fetch(\"http://localhost:4000/users\");\n  //       if (!response.ok) {\n  //         throw new Error(\"Something went wrong!\");\n  //       }\n  //       const data = await response.json();\n  //       setUsers(data);\n  //     } catch (error) {\n  //       setError(error.message);\n  //     }\n  //     setIsLoading(false);\n  //   }, []);\n  //   async function addUserHandler(user) {\n  //     await fetch(\"http://localhost:4000/users\", {\n  //       method: \"POST\",\n  //       body: JSON.stringify(user),\n  //       headers: {\n  //         \"Content-type\": \"application/json\",\n  //       },\n  //     });\n  //   }\n  //   const onDeleteID = useCallback(async (deletedData) => {\n  //     await fetch(`http://localhost:4000/users/${deletedData}`, {\n  //       method: \"DELETE\",\n  //       headers: {\n  //         \"Content-type\": \"application/json\",\n  //       },\n  //     });\n  //   }, []);\n  //   useEffect(() => {\n  //     fetchUsers();\n  //   }, [fetchUsers, onDeleteID]);\n  //   let content = <p>No Users Found</p>;\n  //   if (users.length > 0) {\n  //     content = <UsersList users={users} deleteId={onDeleteID} />;\n  //   }\n  //   if (error) {\n  //     content = <p>{error}</p>;\n  //   }\n  //   if (isLoading) {\n  //     content = (\n  //       <div>\n  //         <Loader\n  //           type=\"spinner-circle\"\n  //           bgColor={\"#000000\"}\n  //           title={\"box-rotate-x\"}\n  //           size={100}\n  //         />\n  //       </div>\n  //     );\n  //   }\n  //   return (\n  //     <Fragment>\n  //       <section>\n  //         <AddUser addUser={addUserHandler} />\n  //       </section>\n  //       <section>\n  //         <Button color=\"success\" onClick={fetchUsers}>\n  //           Fetch UserList\n  //         </Button>\n  //       </section>\n  //       <section>{content}</section>\n  //     </Fragment>\n  //   );\n  // };\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          component: UsersList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/create\",\n          component: AddUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/update/:id\",\n          component: UpdateUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/indianic/Desktop/react/section14/httprequests/src/App.js"],"names":["UsersList","AddUser","UpdateUser","React","BrowserRouter","Router","Switch","Route","App"],"mappings":";AAAA;AACA,OAAOA,SAAP,MAAsB,wBAAtB,C,CACA;;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,UAAP,MAAuB,yBAAvB,C,CACA;;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,MAAlC,EAA0CC,KAA1C,QAAuD,kBAAvD;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,sBACE,QAAC,MAAD;AAAA,2BACE;AAAA,6BACE,QAAC,MAAD;AAAA,gCACE,QAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAC,GAAlB;AAAsB,UAAA,SAAS,EAAER;AAAjC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAC,SAAlB;AAA4B,UAAA,SAAS,EAAEC;AAAvC;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAC,aAAlB;AAAgC,UAAA,SAAS,EAAEC;AAA3C;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAzFD;;KAAMM,G;AA0FN,eAAeA,GAAf","sourcesContent":["// import React, { Fragment, useState, useEffect, useCallback } from \"react\";\nimport UsersList from \"./components/UsersList\";\n// import Loader from \"react-js-loader\";\nimport AddUser from \"./components/AddUser\";\nimport UpdateUser from \"./components/UpdateUser\";\n// import { Button } from \"reactstrap\";\nimport \"./App.css\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nconst App = () => {\n  //   const [users, setUsers] = useState([]);\n  //   const [isLoading, setIsLoading] = useState(false);\n  //   const [error, setError] = useState(null);\n  //   const fetchUsers = useCallback(async () => {\n  //     setIsLoading(true);\n  //     setError(null);\n  //     try {\n  //       const response = await fetch(\"http://localhost:4000/users\");\n  //       if (!response.ok) {\n  //         throw new Error(\"Something went wrong!\");\n  //       }\n  //       const data = await response.json();\n  //       setUsers(data);\n  //     } catch (error) {\n  //       setError(error.message);\n  //     }\n  //     setIsLoading(false);\n  //   }, []);\n\n  //   async function addUserHandler(user) {\n  //     await fetch(\"http://localhost:4000/users\", {\n  //       method: \"POST\",\n  //       body: JSON.stringify(user),\n  //       headers: {\n  //         \"Content-type\": \"application/json\",\n  //       },\n  //     });\n  //   }\n  //   const onDeleteID = useCallback(async (deletedData) => {\n  //     await fetch(`http://localhost:4000/users/${deletedData}`, {\n  //       method: \"DELETE\",\n\n  //       headers: {\n  //         \"Content-type\": \"application/json\",\n  //       },\n  //     });\n  //   }, []);\n  //   useEffect(() => {\n  //     fetchUsers();\n  //   }, [fetchUsers, onDeleteID]);\n\n  //   let content = <p>No Users Found</p>;\n  //   if (users.length > 0) {\n  //     content = <UsersList users={users} deleteId={onDeleteID} />;\n  //   }\n\n  //   if (error) {\n  //     content = <p>{error}</p>;\n  //   }\n\n  //   if (isLoading) {\n  //     content = (\n  //       <div>\n  //         <Loader\n  //           type=\"spinner-circle\"\n  //           bgColor={\"#000000\"}\n  //           title={\"box-rotate-x\"}\n  //           size={100}\n  //         />\n  //       </div>\n  //     );\n  //   }\n  //   return (\n  //     <Fragment>\n  //       <section>\n  //         <AddUser addUser={addUserHandler} />\n  //       </section>\n  //       <section>\n  //         <Button color=\"success\" onClick={fetchUsers}>\n  //           Fetch UserList\n  //         </Button>\n  //       </section>\n  //       <section>{content}</section>\n  //     </Fragment>\n  //   );\n  // };\n\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route exact path=\"/\" component={UsersList} />\n          <Route exact path=\"/create\" component={AddUser} />\n          <Route exact path=\"/update/:id\" component={UpdateUser} />\n        </Switch>\n      </div>\n    </Router>\n  );\n};\nexport default App;\n"]},"metadata":{},"sourceType":"module"}